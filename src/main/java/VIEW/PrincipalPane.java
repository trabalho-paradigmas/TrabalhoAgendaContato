/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package VIEW;

import DAO.ContatoAmizadeDAO;
import DAO.ContatoFamiliaDAO;
import DAO.ContatoTrabalhoDAO;
import Interfaces.ObservarDadosTabela;
import Interfaces.ObservarDadosTabelaAmizade;
import Interfaces.ObservarDadosTabelaFamilia;
import Interfaces.ObservarDadosTabelaOutros;
import Interfaces.ObservarDadosTabelaTrabalho;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Precision M6700
 */
public class PrincipalPane extends javax.swing.JInternalFrame {

    /**
     * Creates new form PrincipalPane
     */
    public PrincipalPane() throws SQLException {
        initComponents();
        lerTabelas();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblFamilia = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        TabelaFamilia = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        TabelaAmizade = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane8 = new javax.swing.JScrollPane();
        TabelaOutros = new javax.swing.JTable();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        TabelaTrabalho = new javax.swing.JTable();
        TextPesquisar = new javax.swing.JTextField();
        btnBuscar = new javax.swing.JButton();
        btnExcluir = new javax.swing.JButton();
        btnCadastrar = new javax.swing.JButton();
        btnEditar = new javax.swing.JButton();

        lblFamilia.setText("Fam√≠lia");

        TabelaFamilia.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Email", "Celular", "Parentesco"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(TabelaFamilia);

        jLabel1.setText("Amizade");

        TabelaAmizade.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Email", "Celular", "Apelido"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane4.setViewportView(TabelaAmizade);

        jLabel2.setText("Outros");

        TabelaOutros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Emeil", "Celular", "Tel. Comercial"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane8.setViewportView(TabelaOutros);

        jLabel3.setText("Trabalho");

        TabelaTrabalho.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "ID", "Nome", "Emeil", "Celular", "Tel. Comercial", "Departamento"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane5.setViewportView(TabelaTrabalho);

        TextPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TextPesquisarActionPerformed(evt);
            }
        });
        TextPesquisar.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                TextPesquisarKeyPressed(evt);
            }
        });

        btnBuscar.setText("Buscar");
        btnBuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBuscarActionPerformed(evt);
            }
        });

        btnExcluir.setText("Excluir");
        btnExcluir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExcluirActionPerformed(evt);
            }
        });

        btnCadastrar.setText("Cadastrar");
        btnCadastrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCadastrarActionPerformed(evt);
            }
        });

        btnEditar.setText("Editar");
        btnEditar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblFamilia)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel2)
                        .addGap(546, 546, 546))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 566, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(76, 76, 76)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 513, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 512, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(354, 354, 354)
                        .addComponent(TextPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                        .addComponent(btnBuscar)
                        .addGap(506, 506, 506))))
            .addGroup(layout.createSequentialGroup()
                .addGap(426, 426, 426)
                .addComponent(btnExcluir)
                .addGap(57, 57, 57)
                .addComponent(btnCadastrar)
                .addGap(47, 47, 47)
                .addComponent(btnEditar)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(66, 66, 66)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TextPesquisar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnBuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 59, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblFamilia)
                    .addComponent(jLabel2))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(52, 52, 52)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExcluir)
                    .addComponent(btnCadastrar)
                    .addComponent(btnEditar))
                .addGap(49, 49, 49))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void TextPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TextPesquisarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_TextPesquisarActionPerformed

    private void TextPesquisarKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_TextPesquisarKeyPressed
        if (evt.getKeyCode() == 10) {
            try {
                // enter pressionado
                lerTabelas();
            } catch (SQLException ex) {
                Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_TextPesquisarKeyPressed

    private void btnBuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBuscarActionPerformed
        try {

            lerTabelas();
        } catch (SQLException ex) {
            Logger.getLogger(frmPrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnBuscarActionPerformed

    private void btnExcluirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExcluirActionPerformed

        confirmaExcluirContato();
        excluirContato();
    }//GEN-LAST:event_btnExcluirActionPerformed

    private void btnCadastrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCadastrarActionPerformed
        cadastrarContatos();
    }//GEN-LAST:event_btnCadastrarActionPerformed

    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed

        enviaDadoTabela();
    }//GEN-LAST:event_btnEditarActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable TabelaAmizade;
    public javax.swing.JTable TabelaFamilia;
    public javax.swing.JTable TabelaOutros;
    public javax.swing.JTable TabelaTrabalho;
    private javax.swing.JTextField TextPesquisar;
    private javax.swing.JButton btnBuscar;
    private javax.swing.JButton btnCadastrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnExcluir;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lblFamilia;
    // End of variables declaration//GEN-END:variables

    public void excluirContato() {

        if (TabelaFamilia.getSelectedRow() != -1) {
            int linha = TabelaFamilia.getSelectedRow();
            int idContato = (int) TabelaFamilia.getValueAt(linha, 0);

            ContatoFamiliaDAO contatoFamiliaDAO = new ContatoFamiliaDAO();
            contatoFamiliaDAO.delete(idContato);

            DefaultTableModel model = (DefaultTableModel) TabelaFamilia.getModel();
            model.removeRow(linha);
            model.fireTableDataChanged();

        } else if (TabelaAmizade.getSelectedRow() != -1) {
            int linha = TabelaAmizade.getSelectedRow();
            int idContato = (int) TabelaAmizade.getValueAt(linha, 0);

            ContatoAmizadeDAO contatoAmizadeDAO = new ContatoAmizadeDAO();
            contatoAmizadeDAO.delete(idContato);

            DefaultTableModel model = (DefaultTableModel) TabelaAmizade.getModel();
            model.removeRow(linha);
            model.fireTableDataChanged();

        } else if (TabelaTrabalho.getSelectedRow() != -1) {
            int linha = TabelaTrabalho.getSelectedRow();
            int idContato = (int) TabelaTrabalho.getValueAt(linha, 0);

            ContatoTrabalhoDAO contatoTrabalhoDAO = new ContatoTrabalhoDAO();
            contatoTrabalhoDAO.delete(idContato);

            DefaultTableModel model = (DefaultTableModel) TabelaTrabalho.getModel();
            model.removeRow(linha);
            model.fireTableDataChanged();

        } else if (TabelaOutros.getSelectedRow() != -1) {
            int linha = TabelaOutros.getSelectedRow();
            int idContato = (int) TabelaOutros.getValueAt(linha, 0);

            ContatoTrabalhoDAO contatoTrabalhoDAO = new ContatoTrabalhoDAO();
            contatoTrabalhoDAO.delete(idContato);

            DefaultTableModel model = (DefaultTableModel) TabelaOutros.getModel();
            model.removeRow(linha);
            model.fireTableDataChanged();
        }
    }

    private void confirmaExcluirContato() {
        JButton buttonConfirmar = new JButton("Confirmar");
        JButton buttonCancelar = new JButton("Cancelar");

        // Adicionar os ouvintes de evento aos bot√µes
        buttonConfirmar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                excluirContato();
                JOptionPane.getRootFrame().dispose();

            }
        });

        buttonCancelar.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Redirecionar para a tela frmPrincipal
                frmPrincipal objTelafrmPrincipalVIEW = null;
                try {
                    objTelafrmPrincipalVIEW = new frmPrincipal();
                } catch (SQLException ex) {
                    Logger.getLogger(frmAdicionarContato.class.getName()).log(Level.SEVERE, null, ex);
                }
                objTelafrmPrincipalVIEW.setVisible(true);
                setVisible(false); // Oculta a tela atual
                JOptionPane.getRootFrame().dispose();
            }
        });

        // Adicionar os bot√µes a um array de objetos
        Object[] options = {buttonConfirmar, buttonCancelar};

        // Exibir o JOptionPane com os bot√µes personalizados
        int result = JOptionPane.showOptionDialog(null, "Certeza ao excluir?", "Excluir", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE, null, options, options[0]);
    }

    private void enviaDadoTabela() {
        if (TabelaFamilia.getSelectedRow() != -1) {
            DefaultTableModel model = (DefaultTableModel) TabelaFamilia.getModel();
            int selectedRow = TabelaFamilia.getSelectedRow();

            int id = Integer.parseInt(TabelaFamilia.getValueAt(selectedRow, 0).toString());
            String nome = (String) TabelaFamilia.getValueAt(selectedRow, 1);
            String email = (String) TabelaFamilia.getValueAt(selectedRow, 2);
            String celular = (String) TabelaFamilia.getValueAt(selectedRow, 3);
            String parentesco = (String) TabelaFamilia.getValueAt(selectedRow, 4);

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Nenhum contato selecionado");
                return;
            } else {
                EditarContato editarContato = new EditarContato();
                editarContato.TextNome.setText(nome);
                editarContato.lblId.setText(String.valueOf(id));
                editarContato.TextCelular.setText(celular);
                editarContato.TextEmail.setText(email);
                editarContato.TextParentesco.setText(parentesco);
                editarContato.TextComercial.setEnabled(false);
                editarContato.TextDepartamento.setEditable(false);
                editarContato.TextApelido.setEditable(false);
                editarContato.TextComercial.setEditable(false);
                editarContato.setVisible(true);
                editarContato.pack();
                editarContato.setLocationRelativeTo(null);
                editarContato.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }
        } else if (TabelaAmizade.getSelectedRow() != -1) {
            DefaultTableModel model = (DefaultTableModel) TabelaAmizade.getModel();
            int selectedRow = TabelaAmizade.getSelectedRow();

            int id = Integer.parseInt(TabelaAmizade.getValueAt(selectedRow, 0).toString());
            String nome = (String) TabelaAmizade.getValueAt(selectedRow, 1);
            String email = (String) TabelaAmizade.getValueAt(selectedRow, 2);
            String celular = (String) TabelaAmizade.getValueAt(selectedRow, 3);
            String parentesco = (String) TabelaAmizade.getValueAt(selectedRow, 4);

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Nenhum contato selecionado");
                return;
            } else {
                EditarContato editarContato = new EditarContato();
                editarContato.TextNome.setText(nome);
                editarContato.lblId.setText(String.valueOf(id));
                editarContato.TextCelular.setText(celular);
                editarContato.TextEmail.setText(email);
                editarContato.TextApelido.setText(parentesco);
                editarContato.TextDepartamento.setEditable(false);
                editarContato.TextComercial.setEditable(false);
                editarContato.TextParentesco.setEditable(false);
                editarContato.setVisible(true);
                editarContato.pack();
                editarContato.setLocationRelativeTo(null);
                editarContato.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }
        } else if (TabelaTrabalho.getSelectedRow() != -1) {
            DefaultTableModel model = (DefaultTableModel) TabelaTrabalho.getModel();
            int selectedRow = TabelaTrabalho.getSelectedRow();

            int id = Integer.parseInt(TabelaOutros.getValueAt(selectedRow, 0).toString());
            String nome = (String) TabelaTrabalho.getValueAt(selectedRow, 1);
            String email = (String) TabelaTrabalho.getValueAt(selectedRow, 2);
            String celular = (String) TabelaTrabalho.getValueAt(selectedRow, 3);
            String parentesco = (String) TabelaTrabalho.getValueAt(selectedRow, 4);

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Nenhum contato selecionado");
                return;
            } else {
                EditarContato editarContato = new EditarContato();
                editarContato.TextNome.setText(nome);
                editarContato.lblId.setText(String.valueOf(id));
                editarContato.TextCelular.setText(celular);
                editarContato.TextEmail.setText(email);
                editarContato.TextComercial.setText(parentesco);
                editarContato.TextDepartamento.setText(parentesco);
                editarContato.TextParentesco.setEditable(false);
                editarContato.TextApelido.setEditable(false);
                editarContato.setVisible(true);
                editarContato.pack();
                editarContato.setLocationRelativeTo(null);
                editarContato.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }
        } else if (TabelaOutros.getSelectedRow() != -1) {
            DefaultTableModel model = (DefaultTableModel) TabelaOutros.getModel();
            int selectedRow = TabelaOutros.getSelectedRow();

            int id = Integer.parseInt(TabelaOutros.getValueAt(selectedRow, 0).toString());
            String nome = (String) TabelaOutros.getValueAt(selectedRow, 1);
            String email = (String) TabelaOutros.getValueAt(selectedRow, 2);
            String celular = (String) TabelaOutros.getValueAt(selectedRow, 3);
            String parentesco = (String) TabelaOutros.getValueAt(selectedRow, 4);

            if (selectedRow == -1) {
                JOptionPane.showMessageDialog(null, "Nenhum contato selecionado");
                return;
            } else {
                EditarContato editarContato = new EditarContato();
                editarContato.lblId.setText(String.valueOf(id));
                editarContato.TextNome.setText(nome);
                editarContato.TextCelular.setText(celular);
                editarContato.TextEmail.setText(email);
                editarContato.TextComercial.setText(parentesco);
                editarContato.TextApelido.setEditable(false);
                editarContato.TextParentesco.setEditable(false);
                editarContato.TextDepartamento.setEditable(false);
                editarContato.setVisible(true);
                editarContato.pack();
                editarContato.setLocationRelativeTo(null);
                editarContato.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

            }
        }

    }

    private void cadastrarContatos() {   // Encaminhando para a tela de adicionar contato
        frmAdicionarContato objTelafrmAdicionarContatoVIEW = null;
        objTelafrmAdicionarContatoVIEW = new frmAdicionarContato();
        objTelafrmAdicionarContatoVIEW.setVisible(true);
        setVisible(false); // Oculta a tela atual
        JOptionPane.getRootFrame().dispose();
    }

    /* Esses m√©todos tem como objetivo atualizar a tabela com 
    os dados mais recentes obtidos do banco de dados, refletindo 
    assim as altera√ß√µes realizadas nos contatos e tambem para o campo de pesquisa */
    public void lerTabela(ObservarDadosTabela observador, JTable tabela, JTextField campoPesquisa) throws SQLException {

        DefaultTableModel modelo = (DefaultTableModel) tabela.getModel();
        modelo.setNumRows(0);
        observador.lerDados(modelo, campoPesquisa.getText());

    }

    public void lerTabelas() throws SQLException {
        lerTabela((ObservarDadosTabela) new ObservarDadosTabelaFamilia(), TabelaFamilia, TextPesquisar);
        lerTabela((ObservarDadosTabela) new ObservarDadosTabelaAmizade(), TabelaAmizade, TextPesquisar);
        lerTabela((ObservarDadosTabela) new ObservarDadosTabelaTrabalho(), TabelaTrabalho, TextPesquisar);
        lerTabela((ObservarDadosTabela) new ObservarDadosTabelaOutros(), TabelaOutros, TextPesquisar);

    }

}
